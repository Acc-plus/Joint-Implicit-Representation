import torch
import numpy as np
from tqdm import tqdm

glyph_map = {
    'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6, 'H': 7,
    'I': 8, 'J': 9, 'K': 10, 'L': 11, 'M': 12, 'N': 13, 'O': 14, 'P': 15,
    'Q': 16, 'R': 17, 'S': 18, 'T': 19, 'U': 20, 'V': 21, 'W': 22, 'X': 23,
    'Y': 24, 'Z': 25, 
    'a': 26, 'b': 27, 'c': 28, 'd': 29, 'e': 30, 'f': 31, 'g': 32, 'h': 33,
    'i': 34, 'j': 35, 'k': 36, 'l': 37, 'm': 38, 'n': 39, 'o': 40, 'p': 41,
    'q': 42, 'r': 43, 's': 44, 't': 45, 'u': 46, 'v': 47, 'w': 48, 'x': 49,
    'y': 50, 'z': 51, 
}

rev_gm = dict()
for gl in glyph_map.keys():
    rev_gm[glyph_map[gl]] = gl

def calculate_divergence(x, x1, x2):
    tot = 0.
    for vec in x:
        dis1 = np.linalg.norm(vec-x1, axis=1).min()
        dis2 = np.linalg.norm(vec-x2, axis=1).min()
        tot += min(dis1, dis2)
    
    tot /= x.shape[0]
    return tot


# import numpy as np
# sel_id = np.array(list(range(1425)), dtype=np.long)
# np.random.seed(14)
# np.random.shuffle(sel_id)


# t0 = 0
# t1 = 0
# ar0 = []
# ar1 = []
# for alpha in range(52):
#     s0 = 0
#     s1 = 0
#     for i in tqdm(range(500)):
#         idx1 = sel_id[i*2]
#         idx2 = sel_id[i*2+1]
#         try:
#             x1 = np.load(f'/mnt/data1/cjh/dvfdata/{rev_gm[alpha]}_Test{alpha}/corners/{idx1}corner.npy')
#             x2 = np.load(f'/mnt/data1/cjh/dvfdata/{rev_gm[alpha]}_Test{alpha}/corners/{idx2}corner.npy')
#         except:
#             continue
#         x_c = np.load(f'./abls/{rev_gm[alpha]}/{i}.npy')
#         x_sdf = np.load(f'./abls/{rev_gm[alpha]}/{i}_sdf.npy')
#         if x_c.shape[0] == 0 or x_sdf.shape[0] == 0:
#             continue
#         s0 += calculate_divergence(x_c, x1, x2)
#         s1 += calculate_divergence(x_sdf, x1, x2)
#     t0 += s0
#     t1 += s1
#     ar0.append(s0)
#     ar1.append(s1)
# print(t0, t1)
# import pdb; pdb.set_trace()


t0 = []
t1 = []
for alpha in tqdm(range(52)):
    print(f'{rev_gm[alpha]}')
    s0 = 0
    s1 = 1
    for i in range(1425):
        try:
            xgt = np.load(f'/mnt/data1/cjh/dvfdata/{rev_gm[alpha]}_Test{alpha}/corners/{i}corner.npy')
        except:
            continue
        x_c = np.load(f'./ablp/{rev_gm[alpha]}c/{i}.npy')
        # x_p = np.load(f'./ablp/{rev_gm[alpha]}c3p/{i}.npy')
        x_p = np.load(f'./renders/{rev_gm[alpha]}c/{i}.npy')
        s0 += abs(x_c.shape[0] - xgt.shape[0])
        s1 += abs(x_p.shape[0] - xgt.shape[0])
    t0.append(s0)
    t1.append(s1)

print(t0, t1)
# print(t0, t1)
# print(t0/74100, t1/74100)
# ncs = []
# for alpha in tqdm(range(52)):
#     print(f'{rev_gm[alpha]}')
#     nc = 0
#     for i in range(1425):
#         try:
#             xgt = np.load(f'/mnt/data1/cjh/dvfdata/{rev_gm[alpha]}_Test{alpha}/corners/{i}corner.npy')
#         except:
#             continue
#         nc += xgt.shape[0]
#     ncs.append(nc/1425)
# print(ncs)
import pdb; pdb.set_trace()

# [12.251228070175438, 9.767719298245614, 5.945964912280702, 6.243508771929824, 12.897543859649122, 11.529122807017544, 9.07157894736842, 14.169824561403509, 6.084912280701754, 5.782456140350877, 13.84701754385965, 7.134736842105263, 14.601403508771929, 11.407017543859649, 2.7866666666666666, 8.12561403508772, 7.750175438596491, 11.55578947368421, 7.131228070175439, 9.111578947368422, 6.849122807017544, 8.542456140350877, 14.673684210526316, 14.668771929824562, 10.92280701754386, 10.143157894736841, 8.828070175438597, 8.275087719298245, 5.474385964912281, 8.042105263157895, 8.04280701754386, 11.550877192982457, 8.668771929824562, 10.169824561403509, 6.432280701754386, 6.419649122807018, 13.124210526315789, 5.458947368421053, 13.077894736842106, 9.272982456140351, 2.7312280701754386, 8.698947368421052, 8.466666666666667, 8.910877192982456, 6.756491228070176, 10.59859649122807, 8.150877192982456, 8.113684210526316, 13.739649122807018, 13.934736842105263, 9.781052631578948, 9.88280701754386]

# 988.6411094225094, 971.7457095488921, [19.17399797400243, 20.10574904534096, 20.704036203584174, 22.91461073707855, 21.086783170576247, 20.837579544196082, 21.305764120987305, 19.642609649796945, 13.369392859532192, 17.60407288846255, 19.4153286272877, 21.428468498118132, 21.33445987019682, 21.82210441462572, 0.4678793520666659, 20.576980379334426, 20.722141425031417, 20.206471047533466, 18.204005727301066, 19.55378063107583, 15.395504816701145, 20.15739702764511, 20.162803561007912, 16.98125898888008, 18.598128034693666, 23.147455551045702, 21.552422132615828, 20.539949163223206, 19.44418497716922, 20.13565183766147, 22.163535236296283, 19.791060568548197, 21.03078759634784, 19.229090389986915, 14.413430218912072, 17.578367477986152, 18.810746328921734, 14.868370434408847, 20.56193833162071, 21.330195618740756, 0.2423538396962815, 19.55512039951582, 20.254609707232163, 21.107039800129538, 17.68926270365501, 18.39518189855799, 20.27497426997079, 21.13541523487247, 21.14140858217961, 18.34376974566914, 20.00154769258026, 24.131931089908797], [18.436837999294745, 18.979514538207138, 19.993420179206865, 20.398400800105776, 19.751885377283912, 19.083119032436247, 22.087932897468008, 18.0612866402224, 13.182977964301733, 18.008328166393476, 18.9160972606264, 20.14651038667437, 20.98871150968861, 20.016462059800332, 0.49273931072734933, 18.71850889605878, 22.891102741893732, 19.98893383670118, 18.82985609908949, 19.215424985755863, 17.794810079601557, 19.634899682085848, 20.618741251188435, 16.631535139804487, 17.980599835546432, 20.997231165376025, 22.660578670524828, 21.031718757612566, 19.548679445274054, 21.348213905108306, 22.03785076505347, 19.466170815149482, 21.936736478935746, 18.4027670935781, 14.802614280771426, 18.909249365935974, 18.773928979311524, 14.698967333478047, 21.144659427146422, 20.082763632580164, 0.3217067780335338, 19.37491805060729, 20.73178208625, 20.95919884807248, 17.71563365029256, 18.883466062887614, 19.053905552067086, 18.51475006991324, 21.008090093728132, 17.07496749714169, 19.881527722366275, 21.534996351532904]