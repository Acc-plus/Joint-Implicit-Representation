24c24
< def sample_on_sdf(img, render_folder, wrpath, prefix, z, seqlen, tlr, tud, stri, strj):
---
> def sample_on_sdf(img, render_folder, wrpath, prefix, z, seqlen, tlr, tud, stri, strj, num_sample=5000):
26c26
<     free_rand_idcs = np.random.uniform(0, 1, size=(5000, 2))
---
>     free_rand_idcs = np.random.uniform(0, 1, size=(num_sample, 2))
30c30
<     np.save(os.path.join(render_folder, f'{prefix}{strj}/sdfs', f'{stri}.npy'), np.concatenate([sdfvalue.reshape(5000, 1), free_rand_idcs], axis=1))
---
>     np.save(os.path.join(render_folder, f'{prefix}{strj}/sdfs', f'{stri}.npy'), np.concatenate([sdfvalue.reshape(num_sample, 1), free_rand_idcs], axis=1))
32c32
<     sampj, normals = sample_svg(z, seqlen, 5000, [tlr, tud])
---
>     sampj, normals = sample_svg(z, seqlen, num_sample, [tlr, tud])
44,72c44,47
< def render_sdf(render_folder, num_renders, j, prefix='Alphabet'):
<     with open('../test_all.pkl', 'rb') as f:
<         trainset = pickle.load(f)
<     if not os.path.exists(render_folder):
<         os.makedirs(render_folder)
<     # import pdb; pdb.set_trace()
<     for i in tqdm(range(num_renders)):
<         if not os.path.exists(os.path.join(render_folder, f'{prefix}{j}')):
<             os.makedirs(os.path.join(render_folder, f'{prefix}{j}'))
< 
<         # print(f'{i}--{j}')
<         sequence = trainset[i]['sequence'][j]
<         seqlen = trainset[i]['seq_len'][j][0]
<         fname = f'{i}.png'
<         wrpath = os.path.join(render_folder, f'{prefix}{j}', fname)
<         img, z, tlr, tud = render_png(wrpath, sequence, seqlen)
<         sample_on_sdf(img, render_folder, wrpath, prefix, z, seqlen, tlr, tud, i, j)
< 
<         fname = f'{i}_s0.png'
<         wrpath = os.path.join(render_folder, f'{prefix}{j}', fname)
<         img, z, tlr, tud = render_png(wrpath, sequence, seqlen, coe = 1.4)
<         sample_on_sdf(img, render_folder, wrpath, prefix, z, seqlen, tlr, tud, f'{i}_s0', j)
< 
<         fname = f'{i}_s1.png'
<         wrpath = os.path.join(render_folder, f'{prefix}{j}', fname)
<         img, z, tlr, tud = render_png(wrpath, sequence, seqlen, coe = 1.6)
<         sample_on_sdf(img, render_folder, wrpath, prefix, z, seqlen, tlr, tud, f'{i}_s1', j)
< 
< def sample_on_cornermap(img, render_folder, wrpath, prefix, z, seqlen, tlr, tud, stri, strj):
---
> resolutions = np.array([i/1024. for i in range(1024)], dtype=np.float32)
> resolutions_x = np.expand_dims(resolutions, 0).repeat(1024, 0).flatten()
> resolutions_y = np.expand_dims(resolutions, 1).repeat(1024, 1).flatten()
> def sample_on_cornermap(img, render_folder, wrpath, prefix, z, seqlen, tlr, tud, stri, strj, perturb = False):
73a49,50
>     if perturb:
>         corners += np.random.rand(*corners.shape)*0.1
76c53,60
<         return
---
>         free_rands = np.random.choice(1024**2, 5000)
>         output_x = resolutions_x[free_rands]
>         output_y = resolutions_y[free_rands]
>         output_probs = np.zeros_like(output_x)
>         save_cmap = np.stack([output_y, output_x, output_probs], axis = 0)
>         np.save(os.path.join(render_folder, f'{prefix}{strj}/cmaps', f'{stri}cmap.npy'), save_cmap)
>         np.save(os.path.join(render_folder, f'{prefix}{strj}/dcmaps', f'{stri}dcmap.npy'), save_cmap)
>         return 
80,82d63
<     resolutions = np.array([i/1024. for i in range(1024)], dtype=np.float32)
<     resolutions_x = np.expand_dims(resolutions, 0).repeat(1024, 0).flatten()
<     resolutions_y = np.expand_dims(resolutions, 1).repeat(1024, 1).flatten()
95,96c76,81
<     field_rands_x = (np.random.rand(100*lc, 1) ) 
<     field_rands_y = (np.random.rand(100*lc, 1) ) 
---
>     field_rands_x = (np.random.rand(100*lc, 1)-0.5)/10 
>     field_rands_y = (np.random.rand(100*lc, 1)-0.5)/10
>     for i in range(lc):
>         field_rands_x[i*100:(i+1)*100] += mu_x[i]
>         field_rands_y[i*100:(i+1)*100] += mu_y[i]
> 
113,115c98,118
< def render_corner_field(render_folder, num_renders, j, prefix='Alphabet', data_PATH = '../test_all.pkl'):
<     with open(data_PATH, 'rb') as f:
<         trainset = pickle.load(f)
---
> 
> def generate_csdflow(img, render_folder, wrpath, prefix, z, seqlen, tlr, tud, stri, strj):
>     if not os.path.exists(os.path.join(render_folder, f'{prefix}{strj}/cmaps', f'{stri}cmap.npy')):
>         return
>     sdfvalue = compute_sdf(img)
>     cmap = np.load(os.path.join(render_folder, f'{prefix}{strj}/cmaps', f'{stri}cmap.npy'))
>     dcmap = np.load(os.path.join(render_folder, f'{prefix}{strj}/dcmaps', f'{stri}dcmap.npy'))
>     
>     cmap_d = (cmap*(1024-1)).astype(np.long)
>     dcmap_d = (dcmap*(1024-1)).astype(np.long)
>     csdflow = sdfvalue[cmap_d[0, :], cmap_d[1, :]]
>     dcsdflow = sdfvalue[dcmap_d[0, :], dcmap_d[1, :]]
> 
>     np.save(os.path.join(render_folder, f'{prefix}{strj}/csdflow', f'{stri}.npy'), csdflow)
>     np.save(os.path.join(render_folder, f'{prefix}{strj}/dcsdflow', f'{stri}.npy'), dcsdflow)
> 
> 
> def render_corner_field(render_folder, num_renders, j, prefix='Alphabet', data_PATH = '../test_all.pkl', trainset = None):
>     if trainset is None:
>         with open(data_PATH, 'rb') as f:
>             trainset = pickle.load(f)
133a137,140
>     if not os.path.exists(os.path.join(render_folder, f'{prefix}{j}/csdflow')):
>         os.makedirs(os.path.join(render_folder, f'{prefix}{j}/csdflow'))
>     if not os.path.exists(os.path.join(render_folder, f'{prefix}{j}/dcsdflow')):
>         os.makedirs(os.path.join(render_folder, f'{prefix}{j}/dcsdflow'))
135c142
<     for i in tqdm(range(num_renders)):
---
>     for i in tqdm(range(len(trainset))):
141,142c148,177
<         sample_on_cornermap(img, render_folder, wrpath, prefix, z, seqlen, tlr, tud, i, j)
<         sample_on_sdf(img, render_folder, wrpath, prefix, z, seqlen, tlr, tud, i, j)
\ No newline at end of file
---
>         sample_on_cornermap(img, render_folder, wrpath, prefix, z, seqlen, tlr, tud, i, j, perturb=False)
>         sample_on_sdf(img, render_folder, wrpath, prefix, z, seqlen, tlr, tud, i, j, num_sample=5000)
>         generate_csdflow(img, render_folder, wrpath, prefix, z, seqlen, tlr, tud, i, j)
>     return trainset
> 
> def render_svg(wrpath, sequence, seqlen, refine = True, coe = 1.2, save_png = True):
>     if refine:
>         z, tlr, tud = reshape_svg(sequence, seqlen, coe = coe)
>         y=mat2path(z, seqlen, 1024, [tlr*1024, tud*1024])
>     else:
>         y=mat2path(sequence, seqlen, 1024)
>     with open(wrpath, 'w') as f:
>         f.write(y)
>     
> 
> def render_svgs(render_folder, num_renders, j, prefix='Alphabet', data_PATH = '../test_all.pkl', trainset = None):
>     if trainset is None:
>         with open(data_PATH, 'rb') as f:
>             trainset = pickle.load(f)
>     if not os.path.exists(render_folder):
>         os.makedirs(render_folder)
>     if not os.path.exists(os.path.join(render_folder, f'{prefix}{j}')):
>         os.makedirs(os.path.join(render_folder, f'{prefix}{j}'))
>     for i in tqdm(range(len(trainset))):
>         sequence = trainset[i]['sequence'][j]
>         seqlen = trainset[i]['seq_len'][j][0]
>         fname = f'{i}.svg'
>         wrpath = os.path.join(render_folder, f'{prefix}{j}', fname)
>         render_svg(wrpath, sequence, seqlen, save_png = True)
>     return trainset
\ No newline at end of file
